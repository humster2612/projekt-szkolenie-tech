{"ast":null,"code":"import axios from 'axios';\n\n// const instance = axios.create({\n//     baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n//     withCredentials: true,\n//     headers: {\n//         \"API-KEY\": \"4f6b56f6-2e32-4b5d-9a97-7442ad977207\"\n//     }\n// });\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:1000/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default instance;\nconst oldInstance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  withCredentials: true,\n  headers: {\n    'API-KEY': '4f6b56f6-2e32-4b5d-9a97-7442ad977207',\n    'Content-Type': 'application/json'\n  }\n});\nexport { oldInstance };\nexport const createUser = async userData => {\n  try {\n    const response = await instance.post('/users', userData);\n    return response.data;\n  } catch (error) {\n    console.error('Ошибка при создании пользователя:', error);\n    throw error;\n  }\n};\n\n// export const authAPI = {\n//     login(email, password) {\n//         return instance.post('/auth/login', { email, password });\n//     },\n//     register(email, password) {\n//         return instance.post('/auth/register', { email, password });\n//     },\n// };\n\nexport const addComment = async (userId, text, postId) => {\n  try {\n    const response = await instance.post('/comments', {\n      userId,\n      text,\n      postId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding comment:', error);\n    throw error;\n  }\n};\nexport const authAPI = {\n  login(email, password) {\n    return axios.post('http://localhost:1000/login', {\n      email,\n      password\n    });\n  },\n  register(username, email, password) {\n    return axios.post('http://localhost:1000/register', {\n      username,\n      email,\n      password\n    });\n  }\n};\nexport const followAPI = {\n  follow(userId) {\n    return instance.post(`follow/${userId}`);\n  },\n  unfollow(userId) {\n    return instance.delete(`follow/${userId}`);\n  },\n  getUsers(page, count) {\n    return instance.get(`users?page=${page}&count=${count}`);\n  },\n  getProfile(userId) {\n    console.warn('Obsolete method. Please use profileAPI object.');\n    return profileAPI.getProfile(userId);\n  }\n};\nexport const profileAPI = {\n  getProfile(userId) {\n    return instance.get(`profile/${userId}`);\n  },\n  getStatus(userId) {\n    return instance.get(`profile/status/${userId}`);\n  },\n  updateStatus(status) {\n    return instance.put('profile/status', {\n      status: status\n    });\n  }\n};","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","headers","oldInstance","createUser","userData","response","post","data","error","console","addComment","userId","text","postId","authAPI","login","email","password","register","username","followAPI","follow","unfollow","delete","getUsers","page","count","get","getProfile","warn","profileAPI","getStatus","updateStatus","status","put"],"sources":["/Users/victoriapolovyy/Desktop/projekt-szkolenie-tech/Frontend/src/assets/images/api/api.js"],"sourcesContent":["import axios from 'axios';\n\n// const instance = axios.create({\n//     baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n//     withCredentials: true,\n//     headers: {\n//         \"API-KEY\": \"4f6b56f6-2e32-4b5d-9a97-7442ad977207\"\n//     }\n// });\n\n\n\n\n\nconst instance = axios.create({\n    \n    baseURL: 'http://localhost:1000/api',\n    withCredentials: true,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n\nexport default instance;\n\n\nconst oldInstance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '4f6b56f6-2e32-4b5d-9a97-7442ad977207',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport {oldInstance};\n\n\n\n  export const createUser = async (userData) => {\n    \n    try {\n      const response = await instance.post('/users', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Ошибка при создании пользователя:', error);\n      throw error;\n    }\n  };\n\n\n\n// export const authAPI = {\n//     login(email, password) {\n//         return instance.post('/auth/login', { email, password });\n//     },\n//     register(email, password) {\n//         return instance.post('/auth/register', { email, password });\n//     },\n// };\n\nexport const addComment = async (userId, text, postId) => {\n    try {\n      const response = await instance.post('/comments', { userId, text, postId });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      throw error;\n    }\n  };\n\n\n\n\nexport const authAPI = {\n    login(email, password) {\n        return axios.post('http://localhost:1000/login', { email, password });\n    },\n    register(username, email, password) {\n        return axios.post('http://localhost:1000/register', { username, email, password });\n    }\n};\n\n\nexport const followAPI = {\n    follow(userId) {\n      return instance.post(`follow/${userId}`);\n    },\n    unfollow(userId) {\n      return instance.delete(`follow/${userId}`);\n    },\n    getUsers(page, count) {\n      return instance.get(`users?page=${page}&count=${count}`);\n    },\n    getProfile(userId) {\n      console.warn('Obsolete method. Please use profileAPI object.');\n      return profileAPI.getProfile(userId);\n    }\n  };\nexport const profileAPI = {\n    getProfile(userId) {\n        return instance.get(`profile/${userId}`);\n    },\n    getStatus(userId) {\n        return instance.get(`profile/status/${userId}`);\n    },\n    updateStatus(status) {\n        return instance.put('profile/status', { status: status });\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}