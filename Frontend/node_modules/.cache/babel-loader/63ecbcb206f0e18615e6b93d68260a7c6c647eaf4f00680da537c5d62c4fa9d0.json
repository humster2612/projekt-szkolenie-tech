{"ast":null,"code":"import { profileAPI } from \"../assets/images/api/api\";\nconst ADD_POST = 'ADD_POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst SET_POST_ID = 'SET_POST_ID'; // Добавляем новый action type для установки postId\n\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hi how are you'\n  }, {\n    id: 2,\n    message: 'YOOOOOOOO'\n  }],\n  newPostText: '',\n  profile: null,\n  status: '',\n  postId: 0 // Ensure postId is properly initialized\n};\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [...state.posts, {\n          id: state.posts.length + 1,\n          message: action.newPostText\n        }],\n        newPostText: ''\n      };\n    case UPDATE_NEW_POST_TEXT:\n      return {\n        ...state,\n        newPostText: action.newText\n      };\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.status\n      };\n    case SET_USERS_PROFILE:\n      return {\n        ...state,\n        profile: action.profile\n      };\n    case SET_POST_ID:\n      // Новый case для установки postId\n      return {\n        ...state,\n        postId: action.postId\n      };\n    default:\n      return state;\n  }\n};\n\n// Action Creators\nexport const addPostActionCreator = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport const setUsersProfile = profile => ({\n  type: SET_USERS_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const setPostId = postId => ({\n  type: SET_POST_ID,\n  postId\n}); // Action Creator для установки postId\n\n// Thunk Creators\nexport const getStatus = userId => dispatch => {\n  profileAPI.getStatus(userId).then(response => {\n    dispatch(setStatus(response.data));\n  });\n};\nexport const updateStatus = status => dispatch => {\n  profileAPI.updateStatus(status).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  });\n};\nexport default profileReducer;","map":{"version":3,"names":["profileAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USERS_PROFILE","SET_STATUS","SET_POST_ID","initialState","posts","id","message","newPostText","profile","status","postId","profileReducer","state","action","type","length","newText","addPostActionCreator","updateNewPostTextActionCreator","text","setUsersProfile","setStatus","setPostId","getStatus","userId","dispatch","then","response","data","updateStatus","resultCode"],"sources":["/Users/victoriapolovyy/Desktop/projekt-szkolenie-tech/Frontend/src/redux/Profile-reducer.ts"],"sourcesContent":["import { profileAPI } from \"../assets/images/api/api\";\nimport { ThunkAction } from 'redux-thunk';\nimport { Action } from 'redux';\nimport { RootState } from './redux-store';\n\nconst ADD_POST = 'ADD_POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst SET_POST_ID = 'SET_POST_ID'; // Добавляем новый action type для установки postId\n\ntype PostType = {\n    id: number;\n    message: string;\n};\n\ntype ProfileType = {\n    userId: number;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    fullName: string;\n    contacts: ContactsType;\n    photos: PhotosType;\n};\n\ntype PhotosType = {\n    small: string | null;\n    large: string | null;\n};\n\ntype ContactsType = {\n    github: string;\n    vk: string;\n    facebook: string;\n    instagram: string;\n    twitter: string;\n    website: string;\n    youtube: string;\n    mainLink: string;\n};\n\nlet initialState = {\n    posts: [\n        { id: 1, message: 'Hi how are you' },\n        { id: 2, message: 'YOOOOOOOO' }\n    ] as Array<PostType>,\n    newPostText: '',\n    profile: null as ProfileType | null,\n    status: '',\n    postId: 0  // Ensure postId is properly initialized\n};\n\n\nexport type InitialStateType = typeof initialState;\n\nconst profileReducer = (state = initialState, action: ProfileActionTypes): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [...state.posts, { id: state.posts.length + 1, message: action.newPostText }],\n                newPostText: ''\n            };\n\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.newText\n            };\n\n        case SET_STATUS:\n            return {\n                ...state,\n                status: action.status\n            };\n\n        case SET_USERS_PROFILE:\n            return { ...state, profile: action.profile };\n\n        case SET_POST_ID: // Новый case для установки postId\n            return { ...state, postId: action.postId };\n\n        default:\n            return state;\n    }\n};\n\n// Action Creators\nexport const addPostActionCreator = (newPostText: string): AddPostActionType => ({ type: ADD_POST, newPostText });\nexport const updateNewPostTextActionCreator = (text: string): UpdateNewPostTextActionType => ({ type: UPDATE_NEW_POST_TEXT, newText: text });\nexport const setUsersProfile = (profile: ProfileType): SetUsersProfileActionType => ({ type: SET_USERS_PROFILE, profile });\nexport const setStatus = (status: string): SetStatusActionType => ({ type: SET_STATUS, status });\nexport const setPostId = (postId: number): SetPostIdActionType => ({ type: SET_POST_ID, postId }); // Action Creator для установки postId\n\n// Thunk Creators\nexport const getStatus = (userId: number): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n    profileAPI.getStatus(userId)\n        .then(response => {\n            dispatch(setStatus(response.data));\n        });\n};\n\nexport const updateStatus = (status: string): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n    profileAPI.updateStatus(status)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setStatus(status));\n            }\n        });\n};\n\nexport default profileReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}